<?php

declare (strict_types=1);
namespace ApiClients\Client\PetStore\Internal;

use ApiClients\Client\PetStore\Contract;
use ApiClients\Client\PetStore\Error as ErrorSchemas;
use ApiClients\Client\PetStore\Internal;
use ApiClients\Client\PetStore\Operation;
use ApiClients\Client\PetStore\Schema;
use League\OpenAPIValidation;
use React\Http;
use ApiClients\Contracts;
final class Routers
{
    private ?Internal\Router\Get\Pets $internalğŸ”€RouterğŸ”€GetğŸ”€Pets = null;
    private ?Internal\Router\Get\PetsList $internalğŸ”€RouterğŸ”€GetğŸ”€PetsList = null;
    private ?Internal\Router\Get\PetsGroupedBy $internalğŸ”€RouterğŸ”€GetğŸ”€PetsGroupedBy = null;
    private ?Internal\Router\Get $internalğŸ”€RouterğŸ”€Get = null;
    private ?Internal\Router\Get\PetsKinds $internalğŸ”€RouterğŸ”€GetğŸ”€PetsKinds = null;
    private ?Internal\Router\List\Pets $internalğŸ”€RouterğŸ”€ListğŸ”€Pets = null;
    private ?Internal\Router\List\PetsList $internalğŸ”€RouterğŸ”€ListğŸ”€PetsList = null;
    private ?Internal\Router\List\PetsKinds $internalğŸ”€RouterğŸ”€ListğŸ”€PetsKinds = null;
    private ?Internal\Router\Post\Pets $internalğŸ”€RouterğŸ”€PostğŸ”€Pets = null;
    public function __construct(private \ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication, private \React\Http\Browser $browser, private \League\OpenAPIValidation\Schema\SchemaValidator $requestSchemaValidator, private \League\OpenAPIValidation\Schema\SchemaValidator $responseSchemaValidator, private Internal\Hydrators $hydrators)
    {
    }
    public function internalğŸ”€RouterğŸ”€GetğŸ”€Pets() : Internal\Router\Get\Pets
    {
        if ($this->internalğŸ”€RouterğŸ”€GetğŸ”€Pets instanceof Internal\Router\Get\Pets === false) {
            $this->internalğŸ”€RouterğŸ”€GetğŸ”€Pets = new Internal\Router\Get\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€GetğŸ”€Pets;
    }
    public function internalğŸ”€RouterğŸ”€GetğŸ”€PetsList() : Internal\Router\Get\PetsList
    {
        if ($this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsList instanceof Internal\Router\Get\PetsList === false) {
            $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsList = new Internal\Router\Get\PetsList(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsList;
    }
    public function internalğŸ”€RouterğŸ”€GetğŸ”€PetsGroupedBy() : Internal\Router\Get\PetsGroupedBy
    {
        if ($this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsGroupedBy instanceof Internal\Router\Get\PetsGroupedBy === false) {
            $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsGroupedBy = new Internal\Router\Get\PetsGroupedBy(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsGroupedBy;
    }
    public function internalğŸ”€RouterğŸ”€Get() : Internal\Router\Get
    {
        if ($this->internalğŸ”€RouterğŸ”€Get instanceof Internal\Router\Get === false) {
            $this->internalğŸ”€RouterğŸ”€Get = new Internal\Router\Get(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€Get;
    }
    public function internalğŸ”€RouterğŸ”€GetğŸ”€PetsKinds() : Internal\Router\Get\PetsKinds
    {
        if ($this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsKinds instanceof Internal\Router\Get\PetsKinds === false) {
            $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsKinds = new Internal\Router\Get\PetsKinds(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€GetğŸ”€PetsKinds;
    }
    public function internalğŸ”€RouterğŸ”€ListğŸ”€Pets() : Internal\Router\List\Pets
    {
        if ($this->internalğŸ”€RouterğŸ”€ListğŸ”€Pets instanceof Internal\Router\List\Pets === false) {
            $this->internalğŸ”€RouterğŸ”€ListğŸ”€Pets = new Internal\Router\List\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€ListğŸ”€Pets;
    }
    public function internalğŸ”€RouterğŸ”€ListğŸ”€PetsList() : Internal\Router\List\PetsList
    {
        if ($this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsList instanceof Internal\Router\List\PetsList === false) {
            $this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsList = new Internal\Router\List\PetsList(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsList;
    }
    public function internalğŸ”€RouterğŸ”€ListğŸ”€PetsKinds() : Internal\Router\List\PetsKinds
    {
        if ($this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsKinds instanceof Internal\Router\List\PetsKinds === false) {
            $this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsKinds = new Internal\Router\List\PetsKinds(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€ListğŸ”€PetsKinds;
    }
    public function internalğŸ”€RouterğŸ”€PostğŸ”€Pets() : Internal\Router\Post\Pets
    {
        if ($this->internalğŸ”€RouterğŸ”€PostğŸ”€Pets instanceof Internal\Router\Post\Pets === false) {
            $this->internalğŸ”€RouterğŸ”€PostğŸ”€Pets = new Internal\Router\Post\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->internalğŸ”€RouterğŸ”€PostğŸ”€Pets;
    }
}
