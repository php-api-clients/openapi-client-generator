<?php

declare (strict_types=1);
namespace ApiClients\Client\PetStore;

use ApiClients\Client\PetStore\Error as ErrorSchemas;
use ApiClients\Client\PetStore\Hydrator;
use ApiClients\Client\PetStore\Operation;
use ApiClients\Client\PetStore\Operator;
use ApiClients\Client\PetStore\Schema;
use ApiClients\Client\PetStore\WebHook;
use ApiClients\Client\PetStore\Router;
use League\OpenAPIValidation;
use React\Http;
use ApiClients\Contracts;
final class Routers
{
    private ?Router\Get\Pets $routerğŸ”€GetğŸ”€Pets = null;
    private ?Router\Get\PetsList $routerğŸ”€GetğŸ”€PetsList = null;
    private ?Router\Get $routerğŸ”€Get = null;
    private ?Router\List\Pets $routerğŸ”€ListğŸ”€Pets = null;
    private ?Router\List\PetsList $routerğŸ”€ListğŸ”€PetsList = null;
    private ?Router\Post\Pets $routerğŸ”€PostğŸ”€Pets = null;
    public function __construct(private \ApiClients\Contracts\HTTP\Headers\AuthenticationInterface $authentication, private \React\Http\Browser $browser, private \League\OpenAPIValidation\Schema\SchemaValidator $requestSchemaValidator, private \League\OpenAPIValidation\Schema\SchemaValidator $responseSchemaValidator, private Hydrators $hydrators)
    {
    }
    public function routerğŸ”€GetğŸ”€Pets() : Router\Get\Pets
    {
        if ($this->routerğŸ”€GetğŸ”€Pets instanceof Router\Get\Pets === false) {
            $this->routerğŸ”€GetğŸ”€Pets = new Router\Get\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€GetğŸ”€Pets;
    }
    public function routerğŸ”€GetğŸ”€PetsList() : Router\Get\PetsList
    {
        if ($this->routerğŸ”€GetğŸ”€PetsList instanceof Router\Get\PetsList === false) {
            $this->routerğŸ”€GetğŸ”€PetsList = new Router\Get\PetsList(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€GetğŸ”€PetsList;
    }
    public function routerğŸ”€Get() : Router\Get
    {
        if ($this->routerğŸ”€Get instanceof Router\Get === false) {
            $this->routerğŸ”€Get = new Router\Get(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€Get;
    }
    public function routerğŸ”€ListğŸ”€Pets() : Router\List\Pets
    {
        if ($this->routerğŸ”€ListğŸ”€Pets instanceof Router\List\Pets === false) {
            $this->routerğŸ”€ListğŸ”€Pets = new Router\List\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€ListğŸ”€Pets;
    }
    public function routerğŸ”€ListğŸ”€PetsList() : Router\List\PetsList
    {
        if ($this->routerğŸ”€ListğŸ”€PetsList instanceof Router\List\PetsList === false) {
            $this->routerğŸ”€ListğŸ”€PetsList = new Router\List\PetsList(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€ListğŸ”€PetsList;
    }
    public function routerğŸ”€PostğŸ”€Pets() : Router\Post\Pets
    {
        if ($this->routerğŸ”€PostğŸ”€Pets instanceof Router\Post\Pets === false) {
            $this->routerğŸ”€PostğŸ”€Pets = new Router\Post\Pets(browser: $this->browser, authentication: $this->authentication, requestSchemaValidator: $this->requestSchemaValidator, responseSchemaValidator: $this->responseSchemaValidator, hydrators: $this->hydrators);
        }
        return $this->routerğŸ”€PostğŸ”€Pets;
    }
}
