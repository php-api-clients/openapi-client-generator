openapi: "3.1.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
servers:
  - url: http://petstore.swagger.io/v1
paths:
  /pets:
    get:
      summary: List all pets
      operationId: pets/list
      tags:
        - pets
      parameters:
      - "$ref": "#/components/parameters/per-page"
      - "$ref": "#/components/parameters/page"
      responses:
        200:
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: "#/components/schemas/Cat"
                    - $ref: "#/components/schemas/Dog"
                    - $ref: "#/components/schemas/Bird"
                    - $ref: "#/components/schemas/Fish"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a pet
      operationId: pets/create
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Cat"
                - $ref: "#/components/schemas/Dog"
                - $ref: "#/components/schemas/Bird"
                - $ref: "#/components/schemas/Fish"
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/gatos:
    get:
      summary: List all cats
      operationId: pets/list/gatos
      tags:
        - cats
      parameters:
        - "$ref": "#/components/parameters/per-page"
        - "$ref": "#/components/parameters/page"
      responses:
        200:
          description: A paged array of cats
          headers:
            x-next:
              description: A link to the next page of cats
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cat"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/names:
    get:
      summary: List all pet names
      operationId: pets/names
      tags:
        - cats
      parameters:
      - "$ref": "#/components/parameters/per-page"
      - "$ref": "#/components/parameters/page"
      responses:
        200:
          description: A paged array of cats
          headers:
            x-next:
              description: A link to the next page of cats
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /pets/{petId}:
    get:
      summary: Info for a specific pet
      operationId: showPetById
      tags:
        - pets
      responses:
        200:
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Cat"
                  - $ref: "#/components/schemas/Dog"
                  - $ref: "#/components/schemas/Bird"
                  - $ref: "#/components/schemas/Fish"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Cat:
      type: object
      required:
        - id
        - name
        - eyes
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        indoor:
          type: bool
        features:
          type: object
        eyes:
          type: object
          oneOf:
            - $ref: "#/components/schemas/RedEyes"
            - $ref: "#/components/schemas/BlueEyes"
            - $ref: "#/components/schemas/GreenEyes"
            - $ref: "#/components/schemas/YellowEyes"
            - $ref: "#/components/schemas/BlackEyes"
    Dog:
      type: object
      required:
        - id
        - name
        - eyes
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        good-boy:
          type: bool
        eyes:
          type: object
          oneOf:
            - $ref: "#/components/schemas/RedEyes"
            - $ref: "#/components/schemas/BlueEyes"
            - $ref: "#/components/schemas/GreenEyes"
            - $ref: "#/components/schemas/YellowEyes"
            - $ref: "#/components/schemas/BlackEyes"
    Bird:
      type: object
      required:
        - id
        - name
        - eyes
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string4
        flies:
          type: bool
        eyes:
          type: object
          oneOf:
            - $ref: "#/components/schemas/RedEyes"
            - $ref: "#/components/schemas/BlueEyes"
            - $ref: "#/components/schemas/GreenEyes"
            - $ref: "#/components/schemas/YellowEyes"
            - $ref: "#/components/schemas/BlackEyes"
    Fish:
      type: object
      required:
        - id
        - name
        - eyes
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        flat:
          type: bool
        eyes:
          type: object
          oneOf:
            - $ref: "#/components/schemas/RedEyes"
            - $ref: "#/components/schemas/BlueEyes"
            - $ref: "#/components/schemas/GreenEyes"
            - $ref: "#/components/schemas/YellowEyes"
            - $ref: "#/components/schemas/BlackEyes"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Legs:
      type: object
      required:
        - count
        - joints
      properties:
        count:
          type: integer
        joins:
          type: integer
    Tails:
      type: object
      required:
        - count
      properties:
        count:
          type: integer
    Fins:
      type: object
      required:
        - count
        - spikes
      properties:
        count:
          type: integer
        spikes:
          type: integer
    Wings:
      type: object
      required:
        - count
        - features
      properties:
        count:
          type: integer
        features:
          type: integer
    RedEyes:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
        type:
          type: string
          enum:
            - blood
            - wine
            - stale
    GreenEyes:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
        type:
          type: string
          enum:
            - hulk
            - forest
            - feral
    YellowEyes:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
        type:
          type: string
          enum:
            - snake
    BlackEyes:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
        type:
          type: string
          enum:
            - rage
    BlueEyes:
      type: object
      required:
        - count
        - type
      properties:
        count:
          type: integer
        type:
          type: string
          enum:
            - sky
            - boobies
  parameters:
    page:
      name: page
      description: Page number of the results to fetch.
      in: query
      schema:
        type: integer
        default: 1
    per-page:
      name: per_page
      description: The number of results per page (max 100).
      in: query
      schema:
        type: integer
        default: 30
